---
// Pagefind Search component for the documentation site
// This component integrates Pagefind for fast, offline search functionality
---

<div id="pagefind-search-container">
  <button
    id="pagefind-search-button"
    class="p-2 text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500 rounded-md transition-colors"
    aria-label="Search documentation"
  >
    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  </button>
</div>

<!-- Search Modal -->
<div id="pagefind-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <!-- Background overlay -->
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 dark:bg-gray-900 dark:bg-opacity-75 transition-opacity" id="pagefind-overlay"></div>

    <!-- Modal content -->
    <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
      <div class="bg-white dark:bg-gray-800 px-6 pt-6 pb-4">
        <!-- Search header -->
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">
            Search Documentation
          </h3>
          <button
            id="pagefind-close"
            class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500 rounded-md p-1"
            aria-label="Close search"
          >
            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <!-- Search input -->
        <div class="relative mb-4">
          <input
            type="text"
            id="pagefind-search-input"
            placeholder="Search documentation..."
            class="w-full px-4 py-3 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
            autocomplete="off"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
            <kbd class="hidden sm:inline-block px-2 py-1 text-xs font-semibold text-gray-500 bg-gray-100 dark:bg-gray-600 dark:text-gray-300 border border-gray-300 dark:border-gray-500 rounded">
              ESC
            </kbd>
          </div>
        </div>

        <!-- Search results container -->
        <div id="pagefind-results" class="max-h-96 overflow-y-auto">
          <div id="pagefind-loading" class="hidden text-center py-8">
            <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500"></div>
            <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Searching...</p>
          </div>
          <div id="pagefind-empty" class="hidden text-center py-8">
            <p class="text-gray-500 dark:text-gray-400">Start typing to search the documentation</p>
          </div>
          <div id="pagefind-no-results" class="hidden text-center py-8">
            <p class="text-gray-500 dark:text-gray-400">No results found</p>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <div class="bg-gray-50 dark:bg-gray-700 px-6 py-3">
        <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
          <div class="flex items-center space-x-4">
            <span class="flex items-center">
              <kbd class="px-2 py-1 bg-white dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded text-xs">↑↓</kbd>
              <span class="ml-1">Navigate</span>
            </span>
            <span class="flex items-center">
              <kbd class="px-2 py-1 bg-white dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded text-xs">↵</kbd>
              <span class="ml-1">Select</span>
            </span>
          </div>
          <span>Powered by Pagefind</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let pagefindInstance: any = null;
  let currentResults: any[] = [];
  let selectedIndex = -1;

  // Initialize Pagefind when the component loads
  async function initializePagefind() {
    try {
      // Import Pagefind - this will only work after the site is built
      // Use eval to avoid build-time resolution
      const importPath = '/pagefind/pagefind.js';
      const pagefindModule = await (new Function('path', 'return import(path)'))(importPath);
      pagefindInstance = pagefindModule;
      console.log('Pagefind initialized successfully');
    } catch (error) {
      console.warn('Pagefind not available:', error);
      // Show fallback message
      showFallbackMessage();
    }
  }

  function showFallbackMessage() {
    const button = document.getElementById('pagefind-search-button');
    if (button) {
      button.addEventListener('click', () => {
        alert('Search functionality will be available after the site is built. Run "npm run build" to generate the search index.');
      });
    }
  }

  // Open search modal
  function openSearchModal() {
    const modal = document.getElementById('pagefind-modal');
    const input = document.getElementById('pagefind-search-input') as HTMLInputElement;

    if (modal && input) {
      modal.classList.remove('hidden');
      input.focus();
      showEmptyState();
    }
  }

  // Close search modal
  function closeSearchModal() {
    const modal = document.getElementById('pagefind-modal');
    const input = document.getElementById('pagefind-search-input') as HTMLInputElement;

    if (modal && input) {
      modal.classList.add('hidden');
      input.value = '';
      clearResults();
      selectedIndex = -1;
    }
  }

  // Show different states
  function showEmptyState() {
    hideAllStates();
    const empty = document.getElementById('pagefind-empty');
    if (empty) empty.classList.remove('hidden');
  }

  function showLoadingState() {
    hideAllStates();
    const loading = document.getElementById('pagefind-loading');
    if (loading) loading.classList.remove('hidden');
  }

  function showNoResultsState() {
    hideAllStates();
    const noResults = document.getElementById('pagefind-no-results');
    if (noResults) noResults.classList.remove('hidden');
  }

  function hideAllStates() {
    const states = ['pagefind-empty', 'pagefind-loading', 'pagefind-no-results'];
    states.forEach(id => {
      const element = document.getElementById(id);
      if (element) element.classList.add('hidden');
    });
  }

  // Clear results
  function clearResults() {
    const resultsContainer = document.getElementById('pagefind-results');
    if (resultsContainer) {
      // Remove all result items but keep state elements
      const resultItems = resultsContainer.querySelectorAll('.pagefind-result-item');
      resultItems.forEach(item => item.remove());
    }
    currentResults = [];
    selectedIndex = -1;
  }

  // Perform search
  async function performSearch(query: string) {
    if (!pagefindInstance || !query.trim()) {
      if (!query.trim()) {
        clearResults();
        showEmptyState();
      }
      return;
    }

    showLoadingState();

    try {
      const search = await pagefindInstance.search(query);
      currentResults = search.results;

      if (currentResults.length === 0) {
        showNoResultsState();
        return;
      }

      hideAllStates();
      await displayResults(currentResults);
    } catch (error) {
      console.error('Search error:', error);
      showNoResultsState();
    }
  }

  // Display search results
  async function displayResults(results: any[]) {
    const resultsContainer = document.getElementById('pagefind-results');
    if (!resultsContainer) return;

    clearResults();

    for (let i = 0; i < Math.min(results.length, 10); i++) {
      const result = results[i];
      const data = await result.data();

      const resultElement = createResultElement(data, i);
      resultsContainer.appendChild(resultElement);
    }
  }

  // Create result element
  function createResultElement(data: any, index: number) {
    const div = document.createElement('div');
    div.className = `pagefind-result-item p-3 border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors ${index === selectedIndex ? 'bg-primary-50 dark:bg-primary-900' : ''}`;
    div.dataset.index = index.toString();

    div.innerHTML = `
      <div class="flex items-start space-x-3">
        <div class="flex-1 min-w-0">
          <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">
            ${data.meta?.title || 'Untitled'}
          </h4>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-1 line-clamp-2">
            ${data.excerpt || 'No description available'}
          </p>
          <p class="text-xs text-primary-600 dark:text-primary-400 mt-1">
            ${data.url}
          </p>
        </div>
      </div>
    `;

    div.addEventListener('click', () => {
      window.location.href = data.url;
    });

    return div;
  }

  // Handle keyboard navigation
  function handleKeyNavigation(event: KeyboardEvent) {
    const modal = document.getElementById('pagefind-modal');
    if (!modal || modal.classList.contains('hidden')) return;

    switch (event.key) {
      case 'Escape':
        event.preventDefault();
        closeSearchModal();
        break;
      case 'ArrowDown':
        event.preventDefault();
        navigateResults(1);
        break;
      case 'ArrowUp':
        event.preventDefault();
        navigateResults(-1);
        break;
      case 'Enter':
        event.preventDefault();
        selectCurrentResult();
        break;
    }
  }

  // Navigate through results
  function navigateResults(direction: number) {
    const resultItems = document.querySelectorAll('.pagefind-result-item');
    if (resultItems.length === 0) return;

    // Remove current selection
    if (selectedIndex >= 0 && selectedIndex < resultItems.length) {
      resultItems[selectedIndex].classList.remove('bg-primary-50', 'dark:bg-primary-900');
    }

    // Update selected index
    selectedIndex += direction;
    if (selectedIndex < 0) selectedIndex = resultItems.length - 1;
    if (selectedIndex >= resultItems.length) selectedIndex = 0;

    // Add new selection
    resultItems[selectedIndex].classList.add('bg-primary-50', 'dark:bg-primary-900');
    resultItems[selectedIndex].scrollIntoView({ block: 'nearest' });
  }

  // Select current result
  function selectCurrentResult() {
    if (selectedIndex >= 0 && selectedIndex < currentResults.length) {
      currentResults[selectedIndex].data().then((data: any) => {
        window.location.href = data.url;
      });
    }
  }

  // Debounce function
  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializePagefind();

    // Search button click
    const searchButton = document.getElementById('pagefind-search-button');
    if (searchButton) {
      searchButton.addEventListener('click', openSearchModal);
    }

    // Close button click
    const closeButton = document.getElementById('pagefind-close');
    if (closeButton) {
      closeButton.addEventListener('click', closeSearchModal);
    }

    // Overlay click
    const overlay = document.getElementById('pagefind-overlay');
    if (overlay) {
      overlay.addEventListener('click', closeSearchModal);
    }

    // Search input
    const searchInput = document.getElementById('pagefind-search-input') as HTMLInputElement;
    if (searchInput) {
      const debouncedSearch = debounce(performSearch, 300);
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        debouncedSearch(target.value);
        selectedIndex = -1; // Reset selection on new search
      });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', (event) => {
      // Cmd/Ctrl + K to open search
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault();
        openSearchModal();
      }

      // Handle navigation within modal
      handleKeyNavigation(event);
    });
  });

  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', () => {
    initializePagefind();
  });
</script>

<style>
  /* Custom styles for better visual hierarchy */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Smooth transitions */
  .pagefind-result-item {
    transition: background-color 0.15s ease-in-out;
  }

  /* Focus styles */
  #pagefind-search-input:focus {
    box-shadow: 0 0 0 3px rgba(168, 85, 247, 0.1);
  }

  /* Modal animation */
  #pagefind-modal {
    backdrop-filter: blur(4px);
  }
</style>
