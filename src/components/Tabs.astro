---
export interface Props {
  tabs: Array<{
    id: string;
    label: string;
    content: string;
  }>;
  defaultTab?: string;
}

const { tabs, defaultTab } = Astro.props;
const defaultTabId = defaultTab || tabs[0]?.id;
---

<div class="tabs-container" data-default-tab={defaultTabId}>
  <!-- Tab buttons -->
  <div class="tab-list" role="tablist">
    {tabs.map((tab, index) => (
      <button
        class={`tab-button ${index === 0 ? 'active' : ''}`}
        role="tab"
        data-tab={tab.id}
        aria-selected={index === 0 ? 'true' : 'false'}
        aria-controls={`panel-${tab.id}`}
        id={`tab-${tab.id}`}
      >
        {tab.label}
      </button>
    ))}
  </div>

  <!-- Tab panels -->
  <div class="tab-panels">
    {tabs.map((tab, index) => (
      <div
        class={`tab-panel ${index === 0 ? 'active' : ''}`}
        role="tabpanel"
        id={`panel-${tab.id}`}
        aria-labelledby={`tab-${tab.id}`}
        data-tab={tab.id}
      >
        <Fragment set:html={tab.content} />
      </div>
    ))}
  </div>
</div>

<script>
  function initializeTabs() {
    const tabContainers = document.querySelectorAll('.tabs-container');

    tabContainers.forEach(container => {
      const tabButtons = container.querySelectorAll('.tab-button');
      const tabPanels = container.querySelectorAll('.tab-panel');

      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetTab = button.getAttribute('data-tab');

          // Remove active class from all buttons and panels
          tabButtons.forEach(btn => {
            btn.classList.remove('active');
            btn.setAttribute('aria-selected', 'false');
          });

          tabPanels.forEach(panel => {
            panel.classList.remove('active');
          });

          // Add active class to clicked button and corresponding panel
          button.classList.add('active');
          button.setAttribute('aria-selected', 'true');

          const targetPanel = container.querySelector(`.tab-panel[data-tab="${targetTab}"]`);
          if (targetPanel) {
            targetPanel.classList.add('active');
          }
        });
      });
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTabs);
  } else {
    initializeTabs();
  }

  // Re-initialize on Astro page transitions
  document.addEventListener('astro:page-load', initializeTabs);
</script>

<style>
  .tabs-container {
    @apply border border-gray-200 rounded-lg overflow-hidden;
  }

  .dark .tabs-container {
    @apply border-gray-700;
  }

  .tab-list {
    @apply flex bg-gray-50 border-b border-gray-200;
  }

  .dark .tab-list {
    @apply bg-gray-900 border-gray-700;
  }

  .tab-button {
    @apply px-4 py-3 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-all duration-200 border-r border-gray-200 last:border-r-0 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-inset relative;
  }

  .dark .tab-button {
    @apply text-gray-400 hover:text-gray-100 hover:bg-gray-700 border-gray-700;
  }

  .tab-button.active {
    @apply bg-white text-gray-900 font-semibold;
  }

  .tab-button.active::after {
    @apply absolute bottom-0 left-0 right-0 h-0.5 bg-primary-500;
    content: '';
  }

  .dark .tab-button.active {
    @apply bg-gray-900 text-gray-100;
  }

  .dark .tab-button.active::after {
    @apply bg-primary-400;
  }

  .tab-panels {
    @apply relative;
  }

  .tab-panel {
    @apply hidden;
  }

  .tab-panel.active {
    @apply block;
  }

  .tab-panel :global(.code-block) {
    @apply m-0;
  }

  .tab-panel :global(pre) {
    @apply m-0 border-0 rounded-none bg-gray-900 text-gray-100 p-4;
  }

  .tab-panel :global(code) {
    @apply text-sm font-mono text-orange-400;
  }

  .dark .tab-panel :global(pre) {
    @apply bg-gray-950;
  }

  .dark .tab-panel :global(code) {
    @apply text-orange-300;
  }
</style>
